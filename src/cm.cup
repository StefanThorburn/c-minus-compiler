/*
  Created by: Fei Song
  File Name: tiny.cup
  To Build: java java_cup.Main < tiny.cup
*/
   
   
/* ----------------------Preliminary Declarations Section--------------------*/
   
/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import absyn.*;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    //Overload report_error method so that custom errors also receive line and column numbers
    // Where line is the line number of the error, col is the column number
    // and message is the particular error message
    public void report_error(String message, int line, int col) {
       /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

       if (line >= 0) {                
         m.append(" in line "+(line+1));            
                
         if (col >= 0) {                    
            m.append(", column "+(col+1));
         }
       }

       /* Add to the end of the StringBuffer error message created in
          this method the message that was passed into this method. */
       m.append(" : "+message);
   
       System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};
   
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
terminal IF, ELSE, WHILE, RETURN, VOID, INT;
terminal ASSIGN, EQ, NE, LT, LE, GT, GE, PLUS, MINUS, MUL, DIV;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET, SEMI, COMMA;
terminal String ID, NUM;
terminal ERROR;
   
non terminal DecList program;
non terminal DecList decList;
non terminal Dec dec;
non terminal VarDec varDec;
non terminal NameTy nameTy;
non terminal FunctionDec funDec;
non terminal VarDecList params, paramList, locDec;
non terminal VarDec param;
non terminal CompoundExp compStmt;

non terminal ExpList args, argList, stmtList;
non terminal Exp exp, stmt, expStmt, selStmt;
non terminal WhileExp iterStmt;
non terminal ReturnExp returnStmt;

non terminal Var var;
non terminal CallExp call;
//non terminal Integer relop; 

precedence right ASSIGN;
precedence nonassoc LT, LE, GT, GE, EQ, NE, RETURN; 
precedence left PLUS, MINUS;
precedence left MUL, DIV;
precedence left ELSE;

/* ----------------------------Grammar Section-------------------- */
   
start with program;

// <program> -> <declaration-list>
program	     ::= decList:d
                 {: RESULT = d; :}
               ;

//<declaration-list> -> <declaration-list> <declaration> | <declaration>
decList     ::= decList:d1 dec:d2 
                 {: DecList t = d1;
                    if(d1 == null){
                       d1 = new DecList(d2, null);
                       RESULT = d1;
                    } else {
                     while( t.tail != null ){
                        t = t.tail;
                     }
                    }
                    t.tail = new DecList(d2, null);
                    RESULT = d1;
                 :}
               | dec:d
                 {: RESULT = new DecList(d, null); :}               
               ;

//<declaration> -> <var-declaration> | <fun-declaration>
dec         ::= varDec:d
                 {: RESULT = d; :}
               | funDec:f
                 {: RESULT = f; :}
               ;

//<var-declaration> -> <type-specifier> ID ; | <type-specifier> ID [ NUM ] ;
/* Errors
- Cannot have void type
- Cannot have undefined array size or non-integer array size
- variable name must be an ID
*/
varDec     ::= nameTy:t ID:i SEMI 
                 {: if(NameTy.VOID == t.type){
                      parser.report_error(i + ", type cannot be 'void'", tleft, tright);
                      RESULT = new ErrorDec(tleft, tright, t, i);
                    } else {
                      RESULT = new SimpleDec(tleft, tright, t, i);
                    }
                 :}
               | nameTy:t ID:i LBRACKET NUM:n RBRACKET SEMI
                 {: if(NameTy.VOID == t.type){
                      parser.report_error(i + ", type cannot be 'void'", tleft, tright);
                      RESULT = new ErrorDec(tleft, tright, t, i);
                    } else {                      
                      RESULT = new ArrayDec(tleft, tright, t, i, new IntExp(nleft, nright, Integer.parseInt(n)));         
                    }
                  :}  
               | nameTy:t ID:i LBRACKET RBRACKET SEMI
                 {: 
                  parser.report_error("Array size must be defined at declaration", tleft, tright); 
                  RESULT = new ErrorDec(tleft, tright, t, i);
                 :}    
               | nameTy:t ID:i LBRACKET ID:i2 RBRACKET SEMI
                 {: 
                  parser.report_error("Array size must be an integer", i2left, i2right); 
                  RESULT = new ErrorDec(i2left, i2right, t, i);
                 :}                            
               | nameTy:t error:e SEMI
                 {: 
                  parser.report_error("Invalid variable name", eleft, eright); 
                  RESULT = new ErrorDec(eleft, eright, t, "(ERROR)");
                 :}
               ;

//<type-specifier> -> int  | void
nameTy      ::= INT:n
                 {: RESULT = new NameTy(nleft, nright, NameTy.INT); :}
               | VOID:v
                 {: RESULT = new NameTy(vleft, vright, NameTy.VOID); :}
               ;

/*
| nameTy:t ID:i LPAREN RPAREN compStmt:c
                  {: 
                     parser.report_error("Function \'" + i + "\' parameters cannot be unspecified", tleft, tright);
                     RESULT = new ErrorFunctionDec(tleft, tright);
                  :}
                  */
// <fun-declaration> -> <type-specifier> ID ( <params> ) <compound-stmt>
/* Errors: 
- declaration with unspecified parameters
*/
funDec      ::= nameTy:t ID:i LPAREN params:p RPAREN compStmt:c
                 {: RESULT = new FunctionDec(tleft, tright, t, i, p, c); :}                              
               ;

// <params> -> <param-list> | void
params      ::= paramList:p
                 {: RESULT = p; :} 
               | VOID:v
                 {: RESULT = new VarDecList(new SimpleDec(vleft, vright, new NameTy(vleft, vright, NameTy.VOID), null), null); :}
               ;

// <param-list> -> <param-list> , <param> | <param>
paramList    ::= paramList:p1 COMMA param:p2
                 {: VarDecList v = p1;
                    if(p1==null){
                      p1 = new VarDecList(p2, null);
                      RESULT = p1;
                    } else{
                      while(v.tail != null){
                        v = v.tail;
                      }
                      v.tail = new VarDecList(p2, null);
                      RESULT = p1;
                    }
                 :}
                | param:p
                {: RESULT = new VarDecList(p, null); :} 
               ;

// <param> -> <type-specifier> ID | <type-specifier> ID []
// Note for second rule: with empty brackets, the size is 0 by default
param        ::= INT:n ID:i  
                 {: RESULT = new SimpleDec(nleft, nright, new NameTy(nleft, nright, NameTy.INT), i);
                 :}
               | INT:n ID:i LBRACKET RBRACKET
                 {: RESULT = new ArrayDec(nleft, nright, new NameTy(nleft, nright, NameTy.INT), i, new IntExp(nleft, nright, 0));
                  :}
               ;

// <compound-stmt> -> { <local-declarations> <statement-list> }
compStmt     ::= LBRACE:lb locDec:ld stmtList:s RBRACE
                 {: RESULT = new CompoundExp(lbleft, lbright, ld, s); :}
               ;

//  <local-declarations> -> <local-declarations> <var-declaration> | epsilon
locDec       ::= locDec:d1 varDec:d2
                 {: VarDecList t = d1; 
                    if(d1 == null){
                      d1 = new VarDecList(d2, null);
                      RESULT = d1;
                    } else {
                      while(t.tail != null){
                        t = t.tail;
                      }
                      t.tail = new VarDecList(d2, null);
                      RESULT = d1;
                    }
                 :}
                | {: RESULT = null; :}
               ;

// <statement-list> -> <statement-list> <statement> | epsilon
stmtList      ::= stmtList:s1 stmt:s2
                 {: ExpList t = s1; 
                    if(s1 == null){
                      s1 = new ExpList(s2, null);
                      RESULT = s1;
                    } else {
                      while(t.tail != null)
                        t = t.tail;
                      t.tail = new ExpList(s2, null);
                      RESULT = s1;
                    }
                 :}
                | {: RESULT = null; :}                
               ;

// <statement> -> <expression-stmt> | <compound-stmt> | <selection-stmt> | <iteration-stmt> | <return-stmt>
stmt         ::= expStmt:s
                 {: RESULT = s; :}
               | compStmt:s
                 {: RESULT = s; :}
               | selStmt:s
                 {: RESULT = s; :}
               | iterStmt:s
                 {: RESULT = s; :}
               | returnStmt:s
                 {: RESULT = s; :}
               ;

// <expression-stmt> -> <expression> ; | ;
expStmt       ::= exp:e SEMI
                 {: RESULT = e; :}
               | SEMI
               | error:e SEMI
                  {:
                     parser.report_error("Invalid expression", eleft, eright);
                     RESULT = new ErrorExp(eleft, eright);                     
                  :}
               ;

// <selection-stmt> -> if ( <expression> ) <statement> | if ( <expression> ) <statement> else <statement>
/* Errors:
- No 'else' without 'if'
*/
selStmt        ::= IF:i LPAREN exp:e RPAREN stmt:s
                  {: RESULT = new IfExp(ileft, iright, e, s , null); :}
               | IF:i LPAREN exp:e RPAREN stmt:s1 ELSE stmt:s2
                  {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
               | ELSE:i stmt:s
                  {: 
                     parser.report_error("\'Else\' with no corresponding \'if\'", ileft, iright);
                     RESULT = new ErrorExp(ileft, iright);
                  :}     
               | IF:i LPAREN error:e RPAREN stmt:s
                  {: parser.report_error("Invalid 'If' condition", eleft, eright);
                     RESULT = new IfExp(ileft, iright, new ErrorExp(eleft, eright), s , null); :}            
               ;

// <iteration-stmt> -> while ( <expression> ) <statement>
iterStmt       ::= WHILE:w LPAREN exp:e RPAREN stmt:s
                  {: RESULT = new WhileExp(wleft, wright, e, s); :}
               | WHILE:w LPAREN error:e RPAREN stmt:s
                  {: parser.report_error("Invalid 'While' loop condition", eleft, eright);
                     RESULT = new WhileExp(wleft, wright, new ErrorExp(eleft, eright), s); :}
               ;

// <return-stmt> -> return <expression> ; | return ;
returnStmt     ::= RETURN:r exp:e SEMI
                  {: RESULT = new ReturnExp(rleft, rright, e); :}
               | RETURN:r SEMI
                  {: RESULT = new ReturnExp(rleft, rright, null); :}
               ;
            /* | RETURN:r error:e SEMI
                {: RESULT = new ReturnExp(rleft, rright, new ErrorExp(eleft, eright), e); :} */
                
// <expression> -> <var> = <expression> | <simple-expression>
// <simple-expression> -> <additive-expression> <relop> <additive-expression> | <additive-expression>
// <relop> -> <= | < | > | >= | == | !=
// <additive-expression> -> <additive-expression> <addop> <term> | <term>
// <addop> -> + | -
// <term> -> <term> <mulop> <factor> | <factor>
// <mulop> -> * | /
// <factor> -> ( <expression> ) | <var> | <call> | NUM
// Simplified using precedence rules
exp           ::= var:v ASSIGN exp:e 
                  {: RESULT = new AssignExp(vleft, vright, v, e); :}
               | exp:e1 PLUS exp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.PLUS, e2); :}
               | exp:e1 MINUS exp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.MINUS, e2); :}
               | exp:e1 MUL exp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.MUL, e2); :}
               | exp:e1 DIV exp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.DIV, e2); :}
               | exp:e1 LE exp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.LE, e2); :}
               | exp:e1 LT exp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.LT, e2); :}
               | exp:e1 GT exp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.GT, e2); :}
               | exp:e1 GE exp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.GE, e2); :}
               | exp:e1 EQ exp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.EQ, e2); :}
               | exp:e1 NE exp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.NE, e2); :}
               | LPAREN exp:e RPAREN
                  {: RESULT = e; :}
               | var:v
                  {: RESULT = new VarExp(vleft, vright, v); :}
               | call:c
                  {: RESULT = c; :}
               | NUM:n
                  {: RESULT = new IntExp(nleft, nright, Integer.parseInt(n)); :}
               | NUM:n ASSIGN exp:e
                  {:
                     parser.report_error("Attempt to assign to constant value", nleft, nright);
                     RESULT = new AssignExp(nleft, nright, null, e);
                  :}
               ;
/*

// <simple-expression> -> <additive-expression> <relop> <additive-expression> | <additive-expression>
//Use the position of the left operand for the expression
simpExp       ::= addExp:e1 relop:a addExp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, a, e2); :}
               | addExp:e
                  {: RESULT = e; :}
               | addExp:e1 relop:a error:e2
                  {: 
                     parser.report_error("Invalid right operand", e2left, e2right);
                     RESULT = new OpExp(e1left, e1right, e1, a, new ErrorExp(e2left, e2right)); 
                  :}
               ;

// <relop> -> <= | < | > | >= | == | !=
relop        ::= LE
                  {: RESULT = OpExp.LE; :}
               | LT
                  {: RESULT = OpExp.LT; :}
               | GT
                  {: RESULT = OpExp.GT; :}
               | GE
                  {: RESULT = OpExp.GE; :}
               | EQ
                  {: RESULT = OpExp.EQ; :}
               | NE
                  {: RESULT = OpExp.NE; :}
               ;

// <additive-expression> -> <additive-expression> <addop> <term> | <term>
// <addop> -> + | -
// <term> -> <term> <mulop> <factor> | <factor>
// <mulop> -> * | /
// <factor> -> ( <expression> ) | <var> | <call> | NUM
// Simplified using precedence rules
addExp       ::= addExp:e1 PLUS addExp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.PLUS, e2); :}
               | addExp:e1 MINUS addExp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.MINUS, e2); :}
               | addExp:e1 MUL addExp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.MUL, e2); :}
               | addExp:e1 DIV addExp:e2
                  {: RESULT = new OpExp(e1left, e1right, e1, OpExp.DIV, e2); :}
               | LPAREN exp:e RPAREN
                  {: RESULT = e; :}
               | var:v
                  {: RESULT = new VarExp(vleft, vright, v); :}
               | call:c
                  {: RESULT = c; :}
               | NUM:n
                  {: RESULT = new IntExp(nleft, nright, Integer.parseInt(n)); :}
               ;
*/

// <var> -> ID | ID [ <expression> ]
var            ::= ID:i
                  {: RESULT = new SimpleVar(ileft, iright, i); :}
               | ID:i LBRACKET exp:e RBRACKET
                  {: RESULT = new IndexVar(ileft, iright, i, e); :}
               | ID:i LBRACKET error:e RBRACKET
                  {: 
                     parser.report_error("Attempt to access invalid array index", eleft, eright);
                     RESULT = new IndexVar(ileft, iright, i, new ErrorExp(eleft, eright)); 
                  :}
               ;

// <call> -> ID ( <args> )
call          ::= ID:i LPAREN args:a RPAREN
                  {: RESULT = new CallExp(ileft, iright, i, a); :}
               | ID:i LPAREN error:e RPAREN
                  {:
                     parser.report_error("Invalid function call arguments", eleft, eright);
                     RESULT = new CallExp(ileft, iright, i, null);
                  :}
               ;

// <args> -> <arg-list> | epsilon
args         ::= argList:a
                  {: RESULT = a; :}
               |  {: RESULT = new ExpList(null, null); :}
               ;

// <arg-list> -> <arg-list> , <expression> | <expression>
argList      ::= argList: a COMMA exp:e
                  {: ExpList b = a;
                     if(a == null) {
                        a = new ExpList(e, null);
                        RESULT = a;
                     } else {
                        while(b.tail != null) {
                           b = b.tail;
                        }
                     b.tail = new ExpList(e, null);
                     RESULT = a; 
                     }; :}
               | exp:e
                  {: RESULT = new ExpList(e, null); :}
               | error:e COMMA exp:e1
                  {: 
                     parser.report_error("Invalid argument list in the function call", eleft, eright);
                     RESULT = new ExpList(new ErrorExp(eleft, eright), null); 
                  :}
               ;
